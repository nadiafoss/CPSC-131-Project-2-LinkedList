// Nadia Foss
// CWID: 884605973

#include <iostream>
#include <memory>
#include <vector>
#include <string>

template <typename T>
class Tab {
public:
    std::string url;
    std::string name;
    T memory;
    std::shared_ptr<Tab<T>> prev;
    std::shared_ptr<Tab<T>> next;

    Tab(std::string u, std::string n, T m) : url(u), name(n), memory(m), prev(nullptr), next(nullptr) {}
};

template <typename T>
class Browser {
private:
    std::shared_ptr<Tab<T>> head;
    std::shared_ptr<Tab<T>> tail;
    std::shared_ptr<Tab<T>> current;
    std::vector<std::pair<std::string, std::string>> bookmarks;

public:
    Browser() : head(nullptr), tail(nullptr), current(nullptr) {}

    void addNewTab(std::string url, std::string name, T memory) {
    std::shared_ptr<Tab<T>> newTab = std::make_shared<Tab<T>>(url, name, memory);
    if (!head) {
        head = tail = current = newTab;
    } else {
        tail->next = newTab;
        newTab->prev = tail;
        tail = newTab;
    }
    current = newTab; // Update current tab to the newly added tab
}

    void switchToPrevTab() {
        if (current && current->prev) {
            current = current->prev;
            std::cout << current->url << std::endl;
            std::cout << current->name << std::endl;
            std::cout << current->memory << "\n" << std::endl;
        } else {
            std::cout << "No previous tab\n" << std::endl;
        }
    }

    void switchToNextTab() {
        if (current && current->next) {
            current = current->next;
            std::cout << current->url << std::endl;
            std::cout << current->name << std::endl;
            std::cout << current->memory << "\n" << std::endl;
        } else {
            std::cout << "No next tab\n" << std::endl;
        }
    }

    void closeCurrentTab() {
        if (current) {
            std::shared_ptr<Tab<T>> temp = current;
            if (current->prev) {
                current = current->prev;
                current->next = temp->next;
            } else if (current->next) {
                current = current->next;
                current->prev = nullptr;
                head = current;
            } else {
                head = tail = current = nullptr;
            }
            std::cout << "Now the current tab is = " << current->name << "\n" << std::endl;
        }
    }

    void bookmarkCurrent() {
        if (current) {
            for (const auto& bookmark : bookmarks) {
                if (bookmark.first == current->name && bookmark.second == current->url) {
                    std::cout << "The bookmark is already added!!\n" << std::endl;
                    return;
                }
            }
            bookmarks.push_back(std::make_pair(current->name, current->url));
        }
    }

    void showBookmarkTab() {
        std::cout << "Bookmarks:" << std::endl;
        for (const auto& bookmark : bookmarks) {
            std::cout << bookmark.first << "(" << bookmark.second << ")" << std::endl;
        }
        std::cout << std::endl;
    }

    void moveCurrentToFirst() {
        if (current) {
            if (current->prev) {
                current->prev->next = current->next;
                if (current->next) {
                    current->next->prev = current->prev;
                } else {
                    tail = current->prev;
                }
                current->next = head;
                current->prev = nullptr;
                head->prev = current;
                head = current;
            }
        }
    }

    T total_memory() {
        T total = 0;
        std::shared_ptr<Tab<T>> temp = head;
        while (temp) {
            total += temp->memory;
            temp = temp->next;
        }
        return total;
    }

    void deleteTab() {
        if (!head) return;

        std::shared_ptr<Tab<T>> maxMemoryTab = head;
        std::shared_ptr<Tab<T>> temp = head->next;

        while (temp) {
            if (temp->memory > maxMemoryTab->memory) {
                maxMemoryTab = temp;
            }
            temp = temp->next;
        }

        if (maxMemoryTab == head) {
            head = head->next;
            if (head) {
                head->prev = nullptr;
            }
        } else if (maxMemoryTab == tail) {
            tail = tail->prev;
            tail->next = nullptr;
        } else {
            maxMemoryTab->prev->next = maxMemoryTab->next;
            maxMemoryTab->next->prev = maxMemoryTab->prev;
        }

        std::cout << "Deleted element = " << maxMemoryTab->name << " with memory size = " << maxMemoryTab->memory << "\n" << std::endl;
    }

    void display() {
        std::shared_ptr<Tab<T>> curr = head;
        std::cout << "Browser tab list =" << std::endl;
        while (curr) {
            std::cout << "| " << curr->name << " x|--> ";
            curr = curr->next;
        }
        std::cout << std::endl << std::endl;
    }
};

int main() {
    Browser<double> b1;
    b1.addNewTab("https://www.google.com", "Google", 23.45);
    b1.display();
    std::cout << "Switch to previous tab = " << std::endl;
    b1.switchToPrevTab();
    std::cout << "Switch to Next tab = " << std::endl;
    b1.switchToNextTab();
    b1.addNewTab("https://www.youtube.com", "YouTube", 56);
    b1.bookmarkCurrent();
    b1.display();
    b1.addNewTab("https://www.geeksforgeeks.com", "GeeksForGeeks", 45.78);
    b1.bookmarkCurrent();
    b1.addNewTab("https://chat.openai.com", "ChatGPT", 129);
    b1.addNewTab("https://linkedin.com", "LinkedIn", 410);
    b1.bookmarkCurrent();
    b1.addNewTab("https://github.com", "Github", 110);
    b1.addNewTab("https://kaggle.com", "Kaggle", 310);
    b1.bookmarkCurrent();
    b1.display();
    std::cout << "Total memory consumption = " << b1.total_memory() << "MB" << std::endl;
    b1.showBookmarkTab();
    b1.moveCurrentToFirst();
    b1.display();
    b1.deleteTab();
    b1.display();
    std::cout << "Switch to next tab = " << std::endl;
    b1.switchToNextTab();
    std::cout << "Switch to previous tab = " << std::endl;
    b1.switchToPrevTab();
    b1.closeCurrentTab();
    b1.display();
    b1.showBookmarkTab();
    std::cout<<"Total Memory Consumption = "<<b1.total_memory()<<"MB"<<std::endl;
    b1.deleteTab();
    b1.display();
    b1.addNewTab("https://docs.google.com/","Google Docs",102.34);
    b1.display();
    std::cout<<"Switch to previous tab = "<<std::endl;
    b1.switchToPrevTab();
    std::cout<<"Switch to previous tab = "<<std::endl;
    b1.switchToPrevTab();
    std::cout<<"Switch to previous tab = "<<std::endl;
    b1.switchToPrevTab();
    b1.bookmarkCurrent();
    b1.showBookmarkTab();
    std::cout<<"Total Memory Consumption = "<<b1.total_memory()<<"MB"<<std::endl;
    b1.deleteTab();
    b1.display();
    return 0;
}
