// Nadia Foss
// CWID: 884605973

#include<iostream>
#include<memory>
#include<vector>
#include<string>
// Write template class Tab here
template <typename T>
class Tab {
public:
    std::string url;
    std::string name;
    T memory;
    Tab<T>* next;
    Tab<T>* prev;

    Tab(const std::string& u, const std::string& n, const T& m)
        : url(u), name(n), memory(m), next(nullptr), prev(nullptr) {}
};

// Write template class Browser here
template <typename T>
class Browser {
private:
    Tab<T>* head;
    Tab<T>* tail;
    std::vector<std::pair<std::string, std::string>> bookmarks;

public:
    Browser() : head(nullptr), tail(nullptr) {}

    void addNewTab(const std::string& url, const std::string& name, const T& memory) {
        Tab<T>* newTab = new Tab<T>(url, name, memory);
        if (!head) {
            head = tail = newTab;
        } else {
            tail->next = newTab;
            newTab->prev = tail;
            tail = newTab;
        }
    }

    void switchToPrevTab() {
        if (!head || head == tail) {
            std::cout << "No previous tab" << std::endl;
            return;
        }
        if (tail == head->next) {
            head = tail;
            std::cout << "Switched to previous tab = " << head->name << std::endl;
            return;
        }
        Tab<T>* temp = head;
        while (temp->next != tail) {
            temp = temp->next;
        }
        tail = temp;
        head = temp->next;
        std::cout << "Switched to previous tab = " << head->name << std::endl;
    }

    void switchToNextTab() {
        if (!head || head == tail) {
            std::cout << "No next tab" << std::endl;
            return;
        }
        head = head->next;
        std::cout << "Switched to next tab = " << head->name << std::endl;
    }

    void closeCurrentTab() {
        if (!head) {
            std::cout << "No tabs to close" << std::endl;
            return;
        }
        Tab<T>* temp = head;
        if (head->next) {
            head = head->next;
            head->prev = nullptr;
        } else {
            head = tail = nullptr;
        }
        delete temp;
        std::cout << "Now the current tab = " << head->name << std::endl;
    }

    void bookmarkCurrent() {
        for (const auto& bookmark : bookmarks) {
            if (bookmark.first == head->name && bookmark.second == head->url) {
                std::cout << "The bookmark is already added!!" << std::endl;
                return;
            }
        }
        bookmarks.push_back({head->name, head->url});
    }

    void showBookmarkTab() {
        std::cout << "Bookmarks:" << std::endl;
        for (const auto& bookmark : bookmarks) {
            std::cout << bookmark.first << "(" << bookmark.second << ")" << std::endl;
        }
    }

    void moveCurrentToFirst() {
        if (!head) {
            std::cout << "No current tab to move" << std::endl;
            return;
        }
        if (head == tail) {
            return;
        }
        Tab<T>* temp = head;
        head = head->next;
        head->prev = nullptr;
        temp->next = nullptr;
        tail->next = temp;
        temp->prev = tail;
        tail = temp;
    }

    T total_memory() {
        Tab<T>* temp = head;
        T totalMemory = 0;
        while (temp) {
            totalMemory += temp->memory;
            temp = temp->next;
        }
        return totalMemory;
    }

    void deleteTab() {
        if (!head) {
            std::cout << "No tabs to delete" << std::endl;
            return;
        }
        Tab<T>* temp = head;
        Tab<T>* deleteNode = head;
        T maxMemory = head->memory;
        while (temp) {
            if (temp->memory > maxMemory) {
                maxMemory = temp->memory;
                deleteNode = temp;
            }
            temp = temp->next;
        }
        if (deleteNode == head && head->next) {
            head = head->next;
            head->prev = nullptr;
        } else if (deleteNode == head && !head->next) {
            head = tail = nullptr;
        } else if (deleteNode == tail) {
            tail = tail->prev;
            tail->next = nullptr;
        } else {
            deleteNode->prev->next = deleteNode->next;
            deleteNode->next->prev = deleteNode->prev;
        }
        delete deleteNode;
        std::cout << "Tab deleted" << std::endl;
    }

    void display() {
        Tab<T>* curr = head;
        std::cout << "Browser tab list = " << std::endl;
        while (curr) {
            std::cout << "| " << curr->name << " x|-->";
            curr = curr->next;
        }
        std::cout << std::endl;
        std::cout << std::endl;
    }
};

int main() {
    Browser<double> b1;
    b1.addNewTab("https://www.google.com", "Google", 23.45);
    b1.display();
    std::cout << "Switch to previous tab = " << std::endl;
    b1.switchToPrevTab();
    std::cout << "Switch to Next tab = " << std::endl;
    b1.switchToNextTab();
    b1.addNewTab("https://www.youtube.com", "YouTube", 56);
    b1.bookmarkCurrent();
    b1.display();
    b1.addNewTab("https://www.geeksforgeeks.com", "GeeksForGeeks", 45.78);
    b1.bookmarkCurrent();
    b1.addNewTab("https://chat.openai.com", "ChatGPT", 129);
    b1.addNewTab("https://linkedin.com", "LinkedIn", 410);
    b1.bookmarkCurrent();
    b1.addNewTab("https://github.com", "Github", 110);
    b1.addNewTab("https://kaggle.com", "Kaggle", 310);
    b1.bookmarkCurrent();
    b1.display();
    std::cout << "Total memory consumption = " << b1.total_memory() << "MB" << std::endl;
    b1.showBookmarkTab();
    b1.moveCurrentToFirst();
    b1.display();
    b1.deleteTab();
    b1.display();
    std::cout << "Switch to next tab = " << std::endl;
    b1.switchToNextTab();
    std::cout << "Switch to previous tab = " << std::endl;
    b1.switchToPrevTab();
    b1.closeCurrentTab();
    b1.display();
    b1.showBookmarkTab();
    std::cout<<"Total Memory Consumption = "<<b1.total_memory()<<"MB"<<std::endl;
    b1.deleteTab();
    b1.display();
    b1.addNewTab("https://docs.google.com/","Google Docs",102.34);
    b1.display();
    std::cout<<"Switch to previous tab = "<<std::endl;
    b1.switchToPrevTab();
    std::cout<<"Switch to previous tab = "<<std::endl;
    b1.switchToPrevTab();
    std::cout<<"Switch to previous tab = "<<std::endl;
    b1.switchToPrevTab();
    b1.bookmarkCurrent();
    b1.showBookmarkTab();
    b1.total_memory();
    b1.deleteTab();
    b1.display();
    return 0;
}
